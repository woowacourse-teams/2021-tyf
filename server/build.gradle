plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.9.2'
    id 'java'
    //queryDsl
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.json:json:20210307'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    compileOnly 'org.projectlombok:lombok'
    implementation 'mysql:mysql-connector-java:8.0.22'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'

    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.2'

    implementation 'com.github.maricn:logback-slack-appender:1.4.0'

    //rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'

    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'commons-io:commons-io:2.6'

    // logback-access
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    // aws cloudwatch log
    implementation 'ca.pjer:logback-awslogs-appender:1.4.0'

    //static method mocking 가능하게해줌
    testImplementation 'org.mockito:mockito-inline:3.4.0'
    //queryDsl
    implementation 'com.querydsl:querydsl-jpa'

    // embedded-redis
    implementation 'it.ozimov:embedded-redis:0.7.2'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

processResources.dependsOn('copySecret')

task copySecret(type: Copy) {
    from 'securityKey/application-dev-secret.yml', 'securityKey/application-prod-secret.yml'
    into 'src/main/resources'
}

//queryDsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//queryDsl end

jacoco {
    toolVersion="0.8.5"
}

jacocoTestReport {
    dependsOn bootJar

    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false

        html.destination file("src/jacoco/jacoco.html")
        xml.destination file("src/jacoco/jacoco.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/TyfServerApplication*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/QA*','**/QB*','**/QC*','**/QD*', '**/QE*',
                            '**/QF*', '**/QG*', '**/QH*', '**/QI*', '**/QJ*',
                            '**/QK*', '**/QL*', '**/QM*', '**/QN*', '**/QO*',
                            '**/QP*', '**/QQ*', '**/QR*', '**/QS*', '**/QT*',
                            '**/QU*', '**/QV*', '**/QW*', '**/QX*', '**/QY*', '**/QZ*',
                            '**/*S3*',
                            '**/RefundFailure',
                            '**/DataLoader',
                            '**/LoginMember',
                            '**/*Connector'
                    ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }

            excludes = [
                    '**.*TyfServerApplication*',
                    '*.Q*',
                    '**.*Request*',
                    '**.*Response*',
                    '**.*LoginMember',
                    '**.*Interceptor*',
                    '**.*Exception*',
                    '**.*S3*',
                    '**.*DataLoader*',
                    '**.NaverOauth2',
                    '**.RefundFailure',
                    '**.IamPortPayment*',
                    '**.ApiSender',
                    '**.*Connector',
                    '**.Oauth2Token',
                    '**.AdminAccount'
            ]
        }
    }
}