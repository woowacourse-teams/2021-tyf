# This is a basic workflow to help you get started with Actions

name: CI/CD for client

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  workflow_dispatch: 


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: deploy

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: jho2301/tyf-client
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}          
      - 
        name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@1bc1040caef9e604eb543693ba89b5bf4fc80935
        uses: docker/build-push-action@v2.6.1
        with:
          # Build's context is the set of files located in the specified PATH or URL
          context: client
          # Path to the Dockerfile
          file: client/dockerfile
          # List of target platforms for build
          platforms: linux/amd64 # optional
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is false
          
          # List of tags
          tags: jho2301/tyf-client # ${{ steps.docker_meta.outputs.tags }}
          # List of metadata for an image
          labels: main # ${{ steps.docker_meta.outputs.labels }}
      - 
        name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_SSH_ID }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            docker pull jho2301/tyf-client:main
            docker rm -f tyf-client
            docker run --name tyf-client -p 80:80 -p 443:443 -v /etc/ssl:/etc/ssl -d jho2301/tyf-client:main
            
